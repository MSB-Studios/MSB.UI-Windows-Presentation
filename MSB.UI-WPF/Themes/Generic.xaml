<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:msma="clr-namespace:MSB.Media.Animations"
    xmlns:mscv="clr-namespace:MSB.Converters"
    xmlns:msuc="clr-namespace:MSB.UI.Controls"
    xmlns:msui="clr-namespace:MSB.UI">

    <!--
    *****************************
            RESOURCES
    *****************************
    -->

    <Style x:Key="WindowCaptionButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource CaptionButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource CaptionButtonForeground}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Width" Value="48"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="GridRoot" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Path x:Name="Icon" Width="16" Height="16" Fill="{TemplateBinding Foreground}" Data="{TemplateBinding Content}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="GridRoot" Property="Background" Value="{DynamicResource CaptionButtonBackgroundPointerOver}"/>
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource CaptionButtonForegroundPointerOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="GridRoot" Property="Background" Value="{DynamicResource CaptionButtonBackgroundPressed}"/>
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource CaptionButtonForegroundPressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="GridRoot" Property="Background" Value="{DynamicResource CaptionButtonBackgroundDisabled}"/>
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource CaptionButtonForegroundDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WindowCloseButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource CaptionButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource CaptionButtonForeground}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Width" Value="48"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="GridRoot" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Path x:Name="Icon" Width="16" Height="16" Fill="{TemplateBinding Foreground}" Data="{TemplateBinding Content}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="GridRoot" Property="Background" Value="#E81123"/>
                            <Setter TargetName="Icon" Property="Fill" Value="#FFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="GridRoot" Property="Background" Value="#8B0A14"/>
                            <Setter TargetName="Icon" Property="Fill" Value="#FFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="GridRoot" Property="Background" Value="{DynamicResource CaptionButtonBackgroundDisabled}"/>
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource CaptionButtonForegroundDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    *****************************
            STYLES
    *****************************
    -->

    <Style TargetType="msui:RichWindow">
        <Setter Property="Background" Value="{DynamicResource WindowChromeBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource WindowChromeBorderBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource WindowChromeForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome NonClientFrameEdges="None" CaptionHeight="0" />
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msui:RichWindow">
                    <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}">
                        <Grid >
                            <Grid.RowDefinitions>
                                <RowDefinition Height="32"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <Grid Grid.Row="0" x:Name="PART_TitleBar" Panel.ZIndex="2" Background="{DynamicResource WindowTitleBarBackground}" WindowChrome.IsHitTestVisibleInChrome="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="144"/>
                                </Grid.ColumnDefinitions>

                                <Rectangle Grid.ColumnSpan="2" x:Name="TitleBarRect" Fill="{DynamicResource ApplicationTransparentBrush}" MinWidth="48"/>
                                <StackPanel >
                                    <ContentPresenter x:Name="IconPresenter" Width="16" Height="16" Margin="8" Content="{TemplateBinding Icon}"/>
                                    <TextBlock x:Name="TitlePresenter" Text="{TemplateBinding Title}" Margin="15, 5"/>
                                </StackPanel>
                                <StackPanel Grid.Column="2" Orientation="Horizontal">
                                    <Button x:Name="Minimize" Style="{StaticResource WindowCaptionButtonStyle}">
                                        <PathGeometry>
                                            M14 8v1H3V8h11z
                                        </PathGeometry>
                                    </Button>
                                    <Button x:Name="MaxRest" Style="{StaticResource WindowCaptionButtonStyle}">
                                        <PathGeometry>
                                            M3 3v10h10V3H3zm9 9H4V4h8v8z
                                        </PathGeometry>
                                    </Button>
                                    <Button x:Name="Close" Style="{StaticResource WindowCloseButtonStyle}">
                                        <PathGeometry>
                                            M7.116 8l-4.558 4.558.884.884L8 8.884l4.558 4.558.884-.884L8.884
                                            8l4.558-4.558-.884-.884L8 7.116 3.442 2.558l-.884.884L7.116 8z
                                        </PathGeometry>
                                    </Button>
                                </StackPanel>
                            </Grid>
                            <Border Grid.Row="1" x:Name="PART_Content" Panel.ZIndex="0" Background="{TemplateBinding Background}">
                                <ContentPresenter Grid.Row="1" x:Name="ContentPresenter" Content="{TemplateBinding Content}"/>
                            </Border>
                            <!--Flyout-->
                            <Grid x:Name="PART_Flyout" Grid.RowSpan="2" Panel.ZIndex="1" Visibility="Collapsed">
                                <Rectangle x:Name="LightDismissLayer" Fill="{DynamicResource LightDismissLayerBrush}"/>
                                <Grid MinWidth="100" MinHeight="50" Margin="50" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <ContentPresenter Margin="10" Content="{TemplateBinding Flyout}"/>
                                </Grid>
                            </Grid>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ResizeMode" Value="NoResize">
                            <Setter TargetName="Minimize" Property="IsEnabled" Value="False"/>
                            <Setter TargetName="MaxRest" Property="IsEnabled" Value="False"/>
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="CanMinimize">
                            <Setter TargetName="MaxRest" Property="IsEnabled" Value="False"/>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="MaxRest" Property="Content">
                                <Setter.Value>
                                    <PathGeometry>
                                        M3 5v9h9V5H3zm8 8H4V6h7v7z
                                        M5 5h1V4h7v7h-1v1h2V3H5v2z
                                    </PathGeometry>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="BorderRoot" Property="Padding" Value="6"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter Property="BorderBrush" Value="{DynamicResource WindowChromeBorderBrushInactive}"/>
                        </Trigger>
                        <!--Custom props triggers...-->
                        <Trigger Property="ExtendViewIntoTitleBar" Value="True">
                            <Setter TargetName="PART_TitleBar" Property="Background" Value="{x:Null}"/>
                            <Setter TargetName="PART_Content" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="PART_Content" Property="Grid.RowSpan" Value="2"/>
                            <Setter TargetName="TitlePresenter" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="IconPresenter" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="TitleBarRect" Property="HorizontalAlignment" Value="Right"/>
                        </Trigger>
                        <Trigger Property="IsIconVisible" Value="False">
                            <Setter TargetName="IconPresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsTitleVisible" Value="False">
                            <Setter TargetName="TitlePresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <!--Flyout triggers...-->
                        <Trigger Property="IsFlyoutOpen" Value="True">
                            <Setter TargetName="PART_Flyout" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="msui:DialogWindow">
        <Setter Property="Background" Value="{DynamicResource MessageDialogBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MessageDialogBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource MessageDialogForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome NonClientFrameEdges="None" CaptionHeight="0" />
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ShowInTaskbar" Value="False"/>
        <Setter Property="MinWidth" Value="500px"/>
        <Setter Property="MinHeight" Value="200px"/>
        <Setter Property="Width" Value="0px"/>
        <Setter Property="Height" Value="0px"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msui:DialogWindow">
                    <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}">
                        <Grid >
                            <Grid.RowDefinitions>
                                <RowDefinition Height="32"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="76"/>
                            </Grid.RowDefinitions>

                            <Grid Grid.Row="0" x:Name="PART_TitleBar" Panel.ZIndex="1" WindowChrome.IsHitTestVisibleInChrome="True">
                                <Rectangle x:Name="TitleBarRect" Fill="{DynamicResource SystemControlTransparentBrush}" MinWidth="30"/>
                            </Grid>
                            <Grid Grid.Row="1" x:Name="PART_Content" TextElement.Foreground="{TemplateBinding Foreground}">
                                <StackPanel Margin="20, 10">
                                    <TextBlock x:Name="CaptionTextBlock" TextTrimming="CharacterEllipsis" FontSize="18" FontWeight="SemiBold"
                                               Text="{Binding Caption}"/>
                                    <TextBlock x:Name="ContentTextBlock" TextWrapping="Wrap" FontSize="14" Margin="0, 10, 0, 10"
                                               Text="{Binding Content}"/>
                                </StackPanel>
                                <ContentPresenter x:Name="CustomContentPresenter" Content="{Binding CustomContent}"/>
                            </Grid>
                            <StackPanel Grid.Row="2" x:Name="PART_Buttons" Margin="10, 0" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center">
                                <Button x:Name="BtnOK" Margin="10, 0" MinWidth="125" Visibility="Collapsed"
                                        Content="OK"/>
                                <Button x:Name="BtnYes" Margin="10, 0" MinWidth="125" Visibility="Collapsed"
                                        Content="Yes"/>
                                <Button x:Name="BtnNo" Margin="10, 0" MinWidth="125" Visibility="Collapsed"
                                        Content="No"/>
                                <Button x:Name="BtnCancel" Margin="10, 0" MinWidth="125" Visibility="Collapsed"
                                        Content="Cancel"/>
                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsActive" Value="False">
                            <Setter Property="BorderBrush" Value="{DynamicResource WindowChromeBorderBrushInactive}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Caption}" Value="">
                            <Setter TargetName="CaptionTextBlock" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Content}" Value="">
                            <Setter TargetName="ContentTextBlock" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding CustomContent}" Value="{x:Null}">
                            <Setter TargetName="CustomContentPresenter" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Buttons}" Value="OK">
                            <Setter TargetName="BtnOK" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnOK" Property="IsDefault" Value="True"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Buttons}" Value="OKCancel">
                            <Setter TargetName="BtnOK" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnCancel" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnOK" Property="IsDefault" Value="True"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Buttons}" Value="YesNoCancel">
                            <Setter TargetName="BtnYes" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnNo" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnCancel" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnCancel" Property="IsDefault" Value="True"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Buttons}" Value="YesNo">
                            <Setter TargetName="BtnYes" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnNo" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnYes" Property="IsDefault" Value="True"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="msuc:Flyout">
        <Setter Property="Background" Value="{DynamicResource FlyoutBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource FlyoutBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource FlyoutForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="150"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msuc:Flyout">
                    <Grid x:Name="GridRoot" Visibility="Collapsed" Opacity="0">
                        <Grid.Resources>
                            <Storyboard x:Key="ClosedToOpenStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GridRoot" Storyboard.TargetProperty="Visibility">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimation Storyboard.TargetName="GridRoot" Storyboard.TargetProperty="Opacity"
                                                 To="1" Duration="0:0:0.15"/>
                            </Storyboard>
                            <Storyboard x:Key="OpenToClosedStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GridRoot" Storyboard.TargetProperty="Visibility">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0.26" Value="{x:Static Visibility.Collapsed}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimation Storyboard.TargetName="GridRoot" Storyboard.TargetProperty="Opacity"
                                                 To="0" Duration="0:0:0.25"/>
                            </Storyboard>
                            <Storyboard x:Key="OpenStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GridRoot" Storyboard.TargetProperty="Visibility">
                                    <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimation Storyboard.TargetName="GridRoot" Storyboard.TargetProperty="Opacity"
                                                 To="1" Duration="0:0:0"/>
                            </Storyboard>
                        </Grid.Resources>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="Closed" To="Open"
                                                      Storyboard="{StaticResource ClosedToOpenStoryboard}"/>
                                    <VisualTransition From="Open" To="Closed"
                                                      Storyboard="{StaticResource OpenToClosedStoryboard}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Closed"/>
                                <VisualState x:Name="Open" Storyboard="{StaticResource OpenStoryboard}"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource OverlayCornerRadius}">
                            <Border.Effect>
                                <DropShadowEffect Color="{DynamicResource DropShadowColor}" ShadowDepth="5" BlurRadius="5" Direction="270" Opacity="0.25"/>
                            </Border.Effect>
                        </Border>
                        <ContentPresenter Content="{TemplateBinding Content}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextElement.Foreground="{TemplateBinding Foreground}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="msuc:SplitView">
        <Setter Property="PaneBackground" Value="{DynamicResource SplitViewPaneBackground}"/>
        <Setter Property="Background" Value="{DynamicResource SplitViewBackgroundBrush}"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msuc:SplitView">
                    <Grid x:Name="Root" Background="{TemplateBinding Background}">
                        <Grid.Resources>
                            <!--#region Transitions-->
                            <Storyboard x:Key="ClosedToOpenOverlayLeftStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="ClosedToOpenOverlayRightStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Right}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Left}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="ClosedCompactLeftToOpenCompactOverlayLeftStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.NegativeOpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="ClosedCompactRightToOpenCompactOverlayRightStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="*"/>
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Right}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Left}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.OpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenOverlayLeftToClosedStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="X">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenOverlayRightToClosedStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Right}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Left}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="X">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenCompactOverlayLeftToClosedCompactLeftStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.NegativeOpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenCompactOverlayRightToClosedCompactRightStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="*"/>
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Right}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Left}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.OpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <!--#endregion-->

                            <!--#region States-->
                            <Storyboard x:Key="ClosedCompactLeftStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimation Duration="0:0:0" Storyboard.TargetName="PaneClipRectangleTransform" To="{Binding TemplateSettings.NegativeOpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Storyboard.TargetProperty="X"/>
                            </Storyboard>
                            <Storyboard x:Key="ClosedCompactRightStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="*"/>
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="2"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Right}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimation Duration="0:0:0" Storyboard.TargetName="PaneClipRectangleTransform" To="{Binding TemplateSettings.OpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Storyboard.TargetProperty="X"/>
                            </Storyboard>
                            <Storyboard x:Key="OpenOverlayLeftStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenOverlayRightStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Right}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Left}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenInlineLeftStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenInlineRightStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="*"/>
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.OpenPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.Column)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Left}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenCompactOverlayLeftStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenCompactOverlayRightStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="*"/>
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Right}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Left}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>

                            <Storyboard x:Key="OverlayVisibleStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Fill">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{DynamicResource LightDismissLayerBrush}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <!--#endregion-->
                        </Grid.Resources>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="DisplayModeStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition Storyboard="{StaticResource ClosedToOpenOverlayLeftStoryboard}"
                                                      From="Closed" To="OpenOverlayLeft" />
                                    <VisualTransition Storyboard="{StaticResource ClosedToOpenOverlayRightStoryboard}"
                                                      From="Closed" To="OpenOverlayRight" />
                                    <VisualTransition Storyboard="{StaticResource ClosedCompactLeftToOpenCompactOverlayLeftStoryboard}"
                                                      From="ClosedCompactLeft" To="OpenCompactOverlayLeft" />
                                    <VisualTransition Storyboard="{StaticResource ClosedCompactRightToOpenCompactOverlayRightStoryboard}"
                                                      From="ClosedCompactRight" To="OpenCompactOverlayRight" />
                                    <VisualTransition Storyboard="{StaticResource OpenOverlayLeftToClosedStoryboard}"
                                                      From="OpenOverlayLeft" To="Closed" />
                                    <VisualTransition Storyboard="{StaticResource OpenOverlayRightToClosedStoryboard}"
                                                      From="OpenOverlayRight" To="Closed" />
                                    <VisualTransition Storyboard="{StaticResource OpenCompactOverlayLeftToClosedCompactLeftStoryboard}"
                                                      From="OpenCompactOverlayLeft" To="ClosedCompactLeft" />
                                    <VisualTransition Storyboard="{StaticResource OpenCompactOverlayRightToClosedCompactRightStoryboard}"
                                                      From="OpenCompactOverlayRight" To="ClosedCompactRight" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="None"/>
                                <VisualState x:Name="Closed"/>
                                <VisualState x:Name="ClosedCompactLeft" Storyboard="{StaticResource ClosedCompactLeftStoryboard}" />
                                <VisualState x:Name="ClosedCompactRight" Storyboard="{StaticResource ClosedCompactRightStoryboard}" />
                                <VisualState x:Name="OpenOverlayLeft" Storyboard="{StaticResource OpenOverlayLeftStoryboard}" />
                                <VisualState x:Name="OpenOverlayRight" Storyboard="{StaticResource OpenOverlayRightStoryboard}" />
                                <VisualState x:Name="OpenInlineLeft" Storyboard="{StaticResource OpenInlineLeftStoryboard}" />
                                <VisualState x:Name="OpenInlineRight" Storyboard="{StaticResource OpenInlineRightStoryboard}" />
                                <VisualState x:Name="OpenCompactOverlayLeft" Storyboard="{StaticResource OpenCompactOverlayLeftStoryboard}" />
                                <VisualState x:Name="OpenCompactOverlayRight" Storyboard="{StaticResource OpenCompactOverlayRightStoryboard}" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="OverlayVisibilityStates">
                                <VisualState x:Name="OverlayNotVisible"/>
                                <VisualState x:Name="OverlayVisible" Storyboard="{StaticResource OverlayVisibleStoryboard}"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="{Binding TemplateSettings.OpenPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <ColumnDefinition x:Name="ColumnDefinition2" Width="*"/>
                        </Grid.ColumnDefinitions>

                        <Grid x:Name="ContentRoot" Grid.ColumnSpan="2">
                            <Grid.RenderTransform>
                                <TranslateTransform x:Name="ContentTransform"/>
                            </Grid.RenderTransform>
                            <ContentPresenter Focusable="False" Content="{TemplateBinding Content}"/>
                            <Rectangle x:Name="LightDismissLayer" Fill="{DynamicResource ApplicationTransparentBrush}" Visibility="Collapsed"/>
                        </Grid>
                        <Grid x:Name="PaneRoot" Background="{TemplateBinding PaneBackground}" Grid.ColumnSpan="2" HorizontalAlignment="Left" Visibility="Collapsed" Width="{Binding OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <Grid.Clip>
                                <RectangleGeometry x:Name="PaneClipRectangle">
                                    <RectangleGeometry.Transform>
                                        <TranslateTransform x:Name="PaneClipRectangleTransform"/>
                                    </RectangleGeometry.Transform>
                                </RectangleGeometry>
                            </Grid.Clip>
                            <Grid.RenderTransform>
                                <TranslateTransform x:Name="PaneTransform"/>
                            </Grid.RenderTransform>
                            <ContentPresenter Focusable="False" Content="{TemplateBinding Pane}"/>
                            <Rectangle x:Name="HCPaneBorder" Fill="{DynamicResource SystemControlTransparentBrush}" HorizontalAlignment="Right" Visibility="Collapsed" Width="1"/>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="msuc:NavigationViewList">
        <Setter Property="Background" Value="{DynamicResource ApplicationTransparentBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ApplicationTransparentBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="Padding" Value="-1 2"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msuc:NavigationViewList">
                    <Border x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="1" SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="msuc:NavigationViewItem">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisualStyle}"/>
        <Setter Property="Background" Value="{DynamicResource NavigationViewItemBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource NavigationViewItemForeground}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="10, 9"/>
        <Setter Property="Margin" Value="4, 2"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msuc:NavigationViewItem">
                    <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
                        <Border.Resources>
                            <Storyboard x:Key="NotchVisibleStoryboard">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="NotchTransform" Storyboard.TargetProperty="ScaleY">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.5"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="NotchCollapsedToVisibleStoryboard">
                                <DoubleAnimation Storyboard.TargetName="NotchTransform" Storyboard.TargetProperty="ScaleY" To="0.5" Duration="0:0:0.5">
                                    <DoubleAnimation.EasingFunction>
                                        <BackEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                            <Storyboard x:Key="NotchVisibleToCollapsedStoryboard">
                                <DoubleAnimation Storyboard.TargetName="NotchTransform" Storyboard.TargetProperty="ScaleY" To="0" Duration="0:0:0.5">
                                    <DoubleAnimation.EasingFunction>
                                        <BackEase EasingMode="EaseIn"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </Border.Resources>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="NotchVisibilityStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="NotchCollapsed" To="NotchVisible"
                                                      Storyboard="{StaticResource NotchCollapsedToVisibleStoryboard}"/>
                                    <VisualTransition From="NotchVisible" To="NotchCollapsed"
                                                      Storyboard="{StaticResource NotchVisibleToCollapsedStoryboard}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="NotchCollapsed"/>
                                <VisualState x:Name="NotchVisible"
                                             Storyboard="{StaticResource NotchVisibleStoryboard}"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="5px" Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Grid Grid.Column="0" x:Name="IconContainer" FlowDirection="{Binding ActualHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                <Viewbox Margin="3">
                                    <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}"/>
                                </Viewbox>
                            </Grid>
                            <Rectangle Grid.Column="0" RadiusX="4" RadiusY="4" Width="4" HorizontalAlignment="Left" RenderTransformOrigin="0.5, 0.5">
                                <Rectangle.Fill>
                                    <SolidColorBrush Color="{DynamicResource ApplicationAccentColor}"/>
                                </Rectangle.Fill>
                                <Rectangle.RenderTransform>
                                    <ScaleTransform x:Name="NotchTransform" ScaleY="0"/>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                            <ContentPresenter Grid.Column="1" x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="IconContainer" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationViewItemBackgroundPointerOver}"/>
                            <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundPointerOver}"/>
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundPointerOver}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationViewItemBackgroundSelectedUnfocused}"/>
                            <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundSelectedUnfocused}"/>
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundSelectedUnfocused}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationViewItemBackgroundSelected}"/>
                            <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundSelected}"/>
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundSelected}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationViewItemBackgroundSelectedPointerOver}"/>
                            <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundSelectedPointerOver}"/>
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundSelectedPointerOver}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationViewItemBackgroundDisabled}"/>
                            <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundDisabled}"/>
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="AppBarButonWidthLeftLabelTemplate" TargetType="msuc:AppBarButton">
        <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
            <StackPanel Orientation="Horizontal">
                <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Label}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}" MinWidth="36" MinHeight="36"/>
            </StackPanel>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="IconPresenter" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="Label" Value="">
                <Setter TargetName="ContentPresenter" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPointerOver}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPointerOver}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPointerOver}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPointerOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPressed}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPressed}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushDisabled}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AppBarButonWidthTopLabelTemplate" TargetType="msuc:AppBarButton">
        <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
            <StackPanel >
                <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Label}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}" MinWidth="36" MinHeight="36"/>
            </StackPanel>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="IconPresenter" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="Label" Value="">
                <Setter TargetName="ContentPresenter" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPointerOver}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPointerOver}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPointerOver}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPointerOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPressed}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPressed}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushDisabled}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AppBarButonWidthRightLabelTemplate" TargetType="msuc:AppBarButton">
        <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
            <StackPanel Orientation="Horizontal">
                <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}" MinWidth="36" MinHeight="36"/>
                <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Label}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </StackPanel>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="IconPresenter" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="Label" Value="">
                <Setter TargetName="ContentPresenter" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPointerOver}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPointerOver}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPointerOver}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPointerOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPressed}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPressed}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushDisabled}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AppBarButonWidthBottomLabelTemplate" TargetType="msuc:AppBarButton">
        <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
            <StackPanel >
                <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}" MinWidth="36" MinHeight="36"/>
                <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Label}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </StackPanel>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="IconPresenter" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="Label" Value="">
                <Setter TargetName="ContentPresenter" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPointerOver}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPointerOver}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPointerOver}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPointerOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPressed}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPressed}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushDisabled}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="msuc:AppBarButton">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisualStyle}"/>
        <Setter Property="Background" Value="{DynamicResource ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10, 7"/>
        <Setter Property="MinHeight" Value="36"/>
        <Setter Property="MinWidth" Value="36"/>
        <Setter Property="Template" Value="{StaticResource AppBarButonWidthBottomLabelTemplate}"/>
        <Style.Triggers>
            <Trigger Property="LabelPosition" Value="Left">
                <Setter Property="Template" Value="{StaticResource AppBarButonWidthLeftLabelTemplate}"/>
            </Trigger>
            <Trigger Property="LabelPosition" Value="Top">
                <Setter Property="Template" Value="{StaticResource AppBarButonWidthTopLabelTemplate}"/>
            </Trigger>
            <Trigger Property="LabelPosition" Value="Right">
                <Setter Property="Template" Value="{StaticResource AppBarButonWidthRightLabelTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
