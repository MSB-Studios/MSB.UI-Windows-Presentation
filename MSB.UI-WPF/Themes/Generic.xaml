<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:msma="clr-namespace:MSB.Media.Animations"
    xmlns:msuc="clr-namespace:MSB.UI.Controls"
    xmlns:msui="clr-namespace:MSB.UI">

    <!--
    ********************************************************************     
    **********     STYLES RESOURCES
    ********************************************************************
    -->

    <Style x:Key="NavigationListScrollViewerStyle" TargetType="ScrollViewer">
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="MouseEnterStoryboard">
                            <DoubleAnimation Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity"
                                             Duration="0:0:0.25" BeginTime="0" To="1"/>
                            <DoubleAnimation Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity"
                                             Duration="0:0:0.25" BeginTime="0" To="1"/>
                            <DoubleAnimation Storyboard.TargetName="Corner" Storyboard.TargetProperty="Opacity"
                                             Duration="0:0:0.25" BeginTime="0" To="1"/>
                        </Storyboard>
                        <Storyboard x:Key="MouseLeaveStoryboard">
                            <DoubleAnimation Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity"
                                             Duration="0:0:0.25" BeginTime="0:0:3" To="0"/>
                            <DoubleAnimation Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity"
                                             Duration="0:0:0.25" BeginTime="0:0:3" To="0"/>
                            <DoubleAnimation Storyboard.TargetName="Corner" Storyboard.TargetProperty="Opacity"
                                             Duration="0:0:0.25" BeginTime="0:0:3" To="0"/>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" Opacity="0" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1"/>
                        <ScrollContentPresenter Grid.RowSpan="2" Grid.ColumnSpan="2" x:Name="PART_ScrollContentPresenter" CanHorizontallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" CanVerticallyScroll="False" Grid.Column="0" Content="{TemplateBinding Content}" CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar" Opacity="0" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Opacity="0" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseEnterStoryboard}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseLeaveStoryboard}"/>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NavigationBackButtonStyle" TargetType="Button">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisualStyle}"/>
        <Setter Property="Background" Value="{DynamicResource NavigationButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource NavigationButtonForeground}"/>
        <Setter Property="FontFamily" Value="{DynamicResource SymbolFontFamily}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="PointerPressedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="ScaleX"
                                             To="0.8" Duration="0:0:0.25">
                                <DoubleAnimation.EasingFunction>
                                    <BackEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="PointerReleasedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="ScaleX"
                                             To="1" Duration="0:0:0.15">
                                <DoubleAnimation.EasingFunction>
                                    <BackEase EasingMode="EaseIn"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource ControlCornerRadius}">
                        <ContentPresenter x:Name="ContentPresenter" Content="&#xE72B;" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5, 0.5">
                            <ContentPresenter.RenderTransform>
                                <ScaleTransform ScaleX="1" ScaleY="1" x:Name="ContentTransform"/>
                            </ContentPresenter.RenderTransform>
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationButtonBackgroundPointerOver}"/>
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationButtonForegroundPointerOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationButtonBackgroundPressed}"/>
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationButtonForegroundPressed}"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PointerPressedStoryboard}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PointerReleasedStoryboard}"/>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationButtonBackgroundDisabled}"/>
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationButtonForegroundDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PaneToggleButtonStyle" TargetType="Button">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisualStyle}"/>
        <Setter Property="Background" Value="{DynamicResource NavigationButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource NavigationButtonForeground}"/>
        <Setter Property="FontFamily" Value="{DynamicResource SymbolFontFamily}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="PointerPressedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="ScaleX"
                                             To="0.8" Duration="0:0:0.25">
                                <DoubleAnimation.EasingFunction>
                                    <BackEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="PointerReleasedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="ScaleX"
                                             To="1" Duration="0:0:0.15">
                                <DoubleAnimation.EasingFunction>
                                    <BackEase EasingMode="EaseIn"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    
                    <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource ControlCornerRadius}">
                        <ContentPresenter x:Name="Content" Content="&#xE700;" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5, 0.5">
                            <ContentPresenter.RenderTransform>
                                <ScaleTransform ScaleX="1" ScaleY="1" x:Name="ContentTransform"/>
                            </ContentPresenter.RenderTransform>
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationButtonBackgroundPointerOver}"/>
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource NavigationButtonForegroundPointerOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationButtonBackgroundPressed}"/>
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource NavigationButtonForegroundPressed}"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PointerPressedStoryboard}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PointerReleasedStoryboard}"/>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationButtonBackgroundDisabled}"/>
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource NavigationButtonForegroundDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WindowCaptionButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource CaptionButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource CaptionButtonForeground}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Width" Value="48"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="GridRoot" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Path x:Name="Icon" Width="16" Height="16" Fill="{TemplateBinding Foreground}" Data="{TemplateBinding Content}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="GridRoot" Property="Background" Value="{DynamicResource CaptionButtonBackgroundPointerOver}"/>
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource CaptionButtonForegroundPointerOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="GridRoot" Property="Background" Value="{DynamicResource CaptionButtonBackgroundPressed}"/>
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource CaptionButtonForegroundPressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="GridRoot" Property="Background" Value="{DynamicResource CaptionButtonBackgroundDisabled}"/>
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource CaptionButtonForegroundDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WindowCloseButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource CaptionButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource CaptionButtonForeground}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Width" Value="48"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="GridRoot" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Path x:Name="Icon" Width="16" Height="16" Fill="{TemplateBinding Foreground}" Data="{TemplateBinding Content}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="GridRoot" Property="Background" Value="#E81123"/>
                            <Setter TargetName="Icon" Property="Fill" Value="#FFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="GridRoot" Property="Background" Value="#8B0A14"/>
                            <Setter TargetName="Icon" Property="Fill" Value="#FFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="GridRoot" Property="Background" Value="{DynamicResource CaptionButtonBackgroundDisabled}"/>
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource CaptionButtonForegroundDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TeachingTipCloseButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource ApplicationTransparentBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonForeground}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Width" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource ControlCornerRadius}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Path x:Name="Icon" Width="16" Height="16" Fill="{TemplateBinding Foreground}">
                            <Path.Data>
                                M7.116 8l-4.558 4.558.884.884L8 8.884l4.558 4.558.884-.884L8.884 8l4.558-4.558-.884-.884L8 7.116 3.442 2.558l-.884.884L7.116 8z
                            </Path.Data>
                        </Path>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPointerOver}"/>
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource ButtonForegroundPointerOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPressed}"/>
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource ButtonForegroundPressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}"/>
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource ButtonForegroundDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToastAlertCloseButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource ApplicationTransparentBrush}"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Width" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource ControlCornerRadius}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Path x:Name="Icon" Width="10" Height="10" Stretch="UniformToFill" Fill="{TemplateBinding Foreground}">
                            <Path.Data>
                                M7.116 8l-4.558 4.558.884.884L8 8.884l4.558 4.558.884-.884L8.884 8l4.558-4.558-.884-.884L8 7.116 3.442 2.558l-.884.884L7.116 8z
                            </Path.Data>
                        </Path>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPointerOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}"/>
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource ButtonForegroundDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <PathGeometry x:Key="MinimizeWindowGeometry">
        M14 8v1H3V8h11z
    </PathGeometry>
    <PathGeometry x:Key="MaximizeWindowGeometry">
        M3 3v10h10V3H3zm9 9H4V4h8v8z
    </PathGeometry>
    <PathGeometry x:Key="RestoreWindowGeometry">
        M3 5v9h9V5H3zm8 8H4V6h7v7z
        M5 5h1V4h7v7h-1v1h2V3H5v2z
    </PathGeometry>
    <PathGeometry x:Key="CloseWindowGeometry">
        M7.116 8l-4.558 4.558.884.884L8 8.884l4.558 4.558.884-.884L8.884 8l4.558-4.558-.884-.884L8 7.116 3.442 2.558l-.884.884L7.116 8z
    </PathGeometry>
    
    <PathGeometry x:Key="InformationGeometry">
        M10 3a7 7 0 100 14 7 7 0 000-14zm-9 7a9 9 0 1118 0 9 9 0 01-18 0zm8-4a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1zm.01 8a1 1 0 102 0V9a1 1 0 10-2 0v5z
    </PathGeometry>
    <PathGeometry x:Key="WarningGeometry">
        M246.312928,5.62892705 C252.927596,9.40873724 258.409564,14.8907053 262.189374,21.5053731 L444.667042,340.84129 C456.358134,361.300701 449.250007,387.363834
        428.790595,399.054926 C422.34376,402.738832 415.04715,404.676552 407.622001,404.676552 L42.6666667,404.676552 C19.1025173,404.676552 7.10542736e-15,385.574034
        7.10542736e-15,362.009885 C7.10542736e-15,354.584736 1.93772021,347.288125 5.62162594,340.84129 L188.099293,21.5053731 C199.790385,1.04596203 225.853517,-6.06216498
        246.312928,5.62892705 Z M224,272 C208.761905,272 197.333333,283.264 197.333333,298.282667 C197.333333,313.984 208.415584,325.248 224,325.248 C239.238095,325.248
        250.666667,313.984 250.666667,298.624 C250.666667,283.264 239.238095,272 224,272 Z M245.333333,106.666667 L202.666667,106.666667 L202.666667,234.666667 L245.333333,234.666667 L245.333333,106.666667 Z
    </PathGeometry>
    <PathGeometry x:Key="ErrorGeometry">
        M42,42z M0,0z M29.582,8.683L29.453,8.803 8.3,29.954C8.051,30.203 7.872,30.432 7.753,30.642 5.713,28.003 4.52,24.642 4.52,20.941 4.52,12.144
        11.146,5.459 19.941,5.459 23.632,5.459 26.955,6.644 29.582,8.683z M10.937,33.704C11.126,33.587,11.325,33.417,11.543,33.197L32.694,12.046
        32.735,12.006C34.475,14.524 35.481,17.608 35.481,21 35.481,29.785 28.785,36.541 20,36.541 16.568,36.541 13.454,35.506 10.937,33.704z
        M0.5,21C0.5,31.775 9.235,40.5 20,40.5 30.767,40.5 39.501,31.775 39.501,21 39.501,10.225 30.767,1.5 20.001,1.5 9.235,1.5 0.5,10.225 0.5,21z
    </PathGeometry>
    <PathGeometry x:Key="SuccessGeometry">
        M351.605 663.268l481.761-481.761c28.677-28.677 75.171-28.677 103.847 0s28.677 75.171 0 103.847L455.452 767.115l.539.539-58.592 58.592c-24.994 24.994-65.516
        24.994-90.51 0L85.507 604.864c-28.677-28.677-28.677-75.171 0-103.847s75.171-28.677 103.847 0l162.25 162.25z
    </PathGeometry>

    <!--
    ***************************************************************
    **********     'MSB.UI.RICHWINDOW' STYLE
    ***************************************************************
    -->

    <Style TargetType="msui:AeroWindow">
        <Setter Property="Background" Value="{DynamicResource WindowBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource WindowBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource WindowForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome NonClientFrameEdges="None" CaptionHeight="0" />
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msui:AeroWindow">
                    <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}">
                        <Grid >
                            <Grid.RowDefinitions>
                                <RowDefinition Height="32"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <Grid Grid.Row="0" x:Name="PART_TitleBar" Panel.ZIndex="2" Background="{DynamicResource WindowTitleBarBackground}" WindowChrome.IsHitTestVisibleInChrome="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <Rectangle Grid.ColumnSpan="2" x:Name="TitleBarRect" Fill="{DynamicResource ApplicationTransparentBrush}" MinWidth="48"/>
                                <StackPanel >
                                    <ContentPresenter x:Name="IconPresenter" Width="16" Height="16" Margin="8" Content="{TemplateBinding Icon}"/>
                                    <TextBlock x:Name="TitlePresenter" Text="{TemplateBinding Title}" Margin="15, 5"/>
                                </StackPanel>
                                <StackPanel Grid.Column="2" Orientation="Horizontal">
                                    <Button x:Name="Minimize" Style="{StaticResource WindowCaptionButtonStyle}" Content="{StaticResource MinimizeWindowGeometry}"/>
                                    <Button x:Name="MaxRest" Style="{StaticResource WindowCaptionButtonStyle}" Content="{StaticResource MaximizeWindowGeometry}"/>
                                    <Button x:Name="Close" Style="{StaticResource WindowCloseButtonStyle}" Content="{StaticResource CloseWindowGeometry}"/>
                                </StackPanel>
                            </Grid>
                            <Border Grid.Row="1" x:Name="PART_Content" Panel.ZIndex="0" Background="{TemplateBinding Background}">
                                <ContentPresenter Grid.Row="1" x:Name="ContentPresenter" Content="{TemplateBinding Content}"/>
                            </Border>
                            <!--Flyout-->
                            <Grid x:Name="PART_Flyout" Grid.RowSpan="2" Panel.ZIndex="1" Visibility="Collapsed">
                                <Rectangle x:Name="LightDismissLayer" Fill="{DynamicResource LightDismissLayerBrush}"/>
                                <Grid MinWidth="100" MinHeight="50" Margin="50" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <ContentPresenter Margin="10" Content="{TemplateBinding Flyout}"/>
                                </Grid>
                            </Grid>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ResizeMode" Value="NoResize">
                            <Setter TargetName="Minimize" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="MaxRest" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="CanMinimize">
                            <Setter TargetName="MaxRest" Property="IsEnabled" Value="False"/>
                            <Setter TargetName="MaxRest" Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="MaxRest" Property="Content" Value="{StaticResource RestoreWindowGeometry}"/>
                            <Setter TargetName="BorderRoot" Property="Padding" Value="6"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter Property="BorderBrush" Value="{DynamicResource WindowBorderBrushInactive}"/>
                        </Trigger>
                        <!--Custom props triggers...-->
                        <Trigger Property="ExtendViewIntoTitleBar" Value="True">
                            <Setter TargetName="PART_TitleBar" Property="Background" Value="{x:Null}"/>
                            <Setter TargetName="PART_Content" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="PART_Content" Property="Grid.RowSpan" Value="2"/>
                            <Setter TargetName="TitlePresenter" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="IconPresenter" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="TitleBarRect" Property="HorizontalAlignment" Value="Right"/>
                        </Trigger>
                        <Trigger Property="IsIconVisible" Value="False">
                            <Setter TargetName="IconPresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsTitleVisible" Value="False">
                            <Setter TargetName="TitlePresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <!--Flyout triggers...-->
                        <Trigger Property="IsFlyoutOpen" Value="True">
                            <Setter TargetName="PART_Flyout" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    ***************************************************************
    **********     'MSB.UI.DIALOGWINDOW' STYLE
    ***************************************************************
    -->

    <Style TargetType="msui:DialogWindow">
        <Setter Property="Background" Value="{DynamicResource DialogBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DialogBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource DialogForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome NonClientFrameEdges="None" CaptionHeight="0" />
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="SizeToContent" Value="Height"/>
        <Setter Property="ShowInTaskbar" Value="False"/>
        <Setter Property="MinHeight" Value="200"/>
        <Setter Property="MinWidth" Value="500"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msui:DialogWindow">
                    <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}">
                        <Grid >
                            <Grid.RowDefinitions>
                                <RowDefinition Height="32"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="76"/>
                            </Grid.RowDefinitions>

                            <Grid Grid.Row="0" x:Name="PART_TitleBar" Panel.ZIndex="2" WindowChrome.IsHitTestVisibleInChrome="True">
                                <Rectangle x:Name="TitleBarRect" Fill="{DynamicResource DialogBackground}"/>
                            </Grid>
                            <Grid Grid.Row="1" x:Name="PART_Content" Margin="20, 10"
                                  TextElement.Foreground="{TemplateBinding Foreground}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <TextBlock Grid.Row="0" x:Name="TitleTextBlock" TextTrimming="CharacterEllipsis"
                                           FontSize="18" FontWeight="SemiBold"
                                           Text="{Binding Title}"/>
                                <TextBlock Grid.Row="1" x:Name="MessageTextBlock" TextWrapping="Wrap"
                                           FontSize="14" Margin="0, 12"
                                           Text="{Binding Message}"/>
                                <ContentPresenter Grid.Row="1" x:Name="ContentPresenter" Margin="0, 12"
                                                  Content="{Binding Content}"/>
                            </Grid>
                            <StackPanel Grid.Row="2" x:Name="PART_Buttons" Margin="10, 0" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center">
                                <Button x:Name="BtnOK" Margin="10, 0" MinWidth="125" Visibility="Collapsed"
                                        Content="OK"/>
                                <Button x:Name="BtnYes" Margin="10, 0" MinWidth="125" Visibility="Collapsed"
                                        Content="Yes"/>
                                <Button x:Name="BtnNo" Margin="10, 0" MinWidth="125" Visibility="Collapsed"
                                        Content="No"/>
                                <Button x:Name="BtnCancel" Margin="10, 0" MinWidth="125" Visibility="Collapsed"
                                        Content="Cancel"/>
                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsActive" Value="False">
                            <Setter Property="BorderBrush" Value="{DynamicResource WindowChromeBorderBrushInactive}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Title}" Value="">
                            <Setter TargetName="TitleTextBlock" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Message}" Value="">
                            <Setter TargetName="MessageTextBlock" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Content}" Value="{x:Null}">
                            <Setter TargetName="ContentPresenter" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Buttons}" Value="OK">
                            <Setter TargetName="BtnOK" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnOK" Property="IsDefault" Value="True"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Buttons}" Value="OKCancel">
                            <Setter TargetName="BtnOK" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnCancel" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnOK" Property="IsDefault" Value="True"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Buttons}" Value="YesNoCancel">
                            <Setter TargetName="BtnYes" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnNo" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnCancel" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnCancel" Property="IsDefault" Value="True"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Buttons}" Value="YesNo">
                            <Setter TargetName="BtnYes" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnNo" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BtnYes" Property="IsDefault" Value="True"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    ***************************************************************
    **********     'MSB.UI.CONTROLS.FLYOUT' STYLE
    ***************************************************************
    -->

    <Style TargetType="msuc:Flyout">
        <Setter Property="Background" Value="{DynamicResource FlyoutBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource FlyoutBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource FlyoutForeground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinHeight" Value="100"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msuc:Flyout">
                    <Grid x:Name="GridRoot" Visibility="Collapsed" Opacity="0">
                        <Grid.Resources>
                            <Storyboard x:Key="ClosedToOpenStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GridRoot" Storyboard.TargetProperty="Visibility">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimation Storyboard.TargetName="GridRoot" Storyboard.TargetProperty="Opacity"
                                                 To="1" Duration="0:0:0.15"/>
                            </Storyboard>
                            <Storyboard x:Key="OpenToClosedStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GridRoot" Storyboard.TargetProperty="Visibility">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0.26" Value="{x:Static Visibility.Collapsed}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimation Storyboard.TargetName="GridRoot" Storyboard.TargetProperty="Opacity"
                                                 To="0" Duration="0:0:0.25"/>
                            </Storyboard>
                            <Storyboard x:Key="OpenStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GridRoot" Storyboard.TargetProperty="Visibility">
                                    <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimation Storyboard.TargetName="GridRoot" Storyboard.TargetProperty="Opacity"
                                                 To="1" Duration="0:0:0"/>
                            </Storyboard>
                        </Grid.Resources>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="Closed" To="Open"
                                                      Storyboard="{StaticResource ClosedToOpenStoryboard}"/>
                                    <VisualTransition From="Open" To="Closed"
                                                      Storyboard="{StaticResource OpenToClosedStoryboard}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Closed"/>
                                <VisualState x:Name="Open" Storyboard="{StaticResource OpenStoryboard}"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource OverlayCornerRadius}">
                            <Border.Effect>
                                <DropShadowEffect Color="{DynamicResource DropShadowColor}" ShadowDepth="5" BlurRadius="5" Direction="270" Opacity="0.25"/>
                            </Border.Effect>
                        </Border>
                        <ContentPresenter Content="{TemplateBinding Content}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="10"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    ***************************************************************
    **********     'MSB.UI.CONTROLS.SPLITVIEW' STYLE
    ***************************************************************
    -->

    <Style TargetType="msuc:SplitView">
        <Setter Property="PaneBackground" Value="{DynamicResource SplitViewPaneBackground}"/>
        <Setter Property="Background" Value="{DynamicResource SplitViewBackground}"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msuc:SplitView">
                    <Grid x:Name="Root" Background="{TemplateBinding Background}">
                        <Grid.Resources>
                            <!--#region Transitions-->
                            <Storyboard x:Key="ClosedToOpenOverlayLeftStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="ClosedToOpenOverlayRightStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Right}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Left}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="ClosedCompactLeftToOpenCompactOverlayLeftStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.NegativeOpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="ClosedCompactRightToOpenCompactOverlayRightStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="*"/>
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Right}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Left}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.OpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenOverlayLeftToClosedStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="X">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenOverlayRightToClosedStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Right}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Left}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="X">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenCompactOverlayLeftToClosedCompactLeftStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.NegativeOpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenCompactOverlayRightToClosedCompactRightStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="*"/>
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Right}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Left}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.OpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <!--#endregion-->

                            <!--#region States-->
                            <Storyboard x:Key="ClosedCompactLeftStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimation Duration="0:0:0" Storyboard.TargetName="PaneClipRectangleTransform" To="{Binding TemplateSettings.NegativeOpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Storyboard.TargetProperty="X"/>
                            </Storyboard>
                            <Storyboard x:Key="ClosedCompactRightStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="*"/>
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="2"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Right}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimation Duration="0:0:0" Storyboard.TargetName="PaneClipRectangleTransform" To="{Binding TemplateSettings.OpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Storyboard.TargetProperty="X"/>
                            </Storyboard>
                            <Storyboard x:Key="OpenOverlayLeftStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenOverlayRightStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Right}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Left}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenInlineLeftStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="X">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenInlineRightStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="*"/>
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.OpenPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.Column)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Left}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenCompactOverlayLeftStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenCompactOverlayRightStoryboard">
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="*"/>
                                <msma:GridLengthAnimation BeginTime="0:0:0" Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="(ColumnDefinition.Width)"
                                                          To="{Binding TemplateSettings.CompactPaneGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="1"/>
                                </Int32AnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Right}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static HorizontalAlignment.Left}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="(UIElement.Visibility)">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>

                            <Storyboard x:Key="OverlayVisibleStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Fill">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{DynamicResource LightDismissLayerBrush}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <!--#endregion-->
                        </Grid.Resources>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="DisplayModeStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition Storyboard="{StaticResource ClosedToOpenOverlayLeftStoryboard}"
                                                      From="Closed" To="OpenOverlayLeft" />
                                    <VisualTransition Storyboard="{StaticResource ClosedToOpenOverlayRightStoryboard}"
                                                      From="Closed" To="OpenOverlayRight" />
                                    <VisualTransition Storyboard="{StaticResource ClosedCompactLeftToOpenCompactOverlayLeftStoryboard}"
                                                      From="ClosedCompactLeft" To="OpenCompactOverlayLeft" />
                                    <VisualTransition Storyboard="{StaticResource ClosedCompactRightToOpenCompactOverlayRightStoryboard}"
                                                      From="ClosedCompactRight" To="OpenCompactOverlayRight" />
                                    <VisualTransition Storyboard="{StaticResource OpenOverlayLeftToClosedStoryboard}"
                                                      From="OpenOverlayLeft" To="Closed" />
                                    <VisualTransition Storyboard="{StaticResource OpenOverlayRightToClosedStoryboard}"
                                                      From="OpenOverlayRight" To="Closed" />
                                    <VisualTransition Storyboard="{StaticResource OpenCompactOverlayLeftToClosedCompactLeftStoryboard}"
                                                      From="OpenCompactOverlayLeft" To="ClosedCompactLeft" />
                                    <VisualTransition Storyboard="{StaticResource OpenCompactOverlayRightToClosedCompactRightStoryboard}"
                                                      From="OpenCompactOverlayRight" To="ClosedCompactRight" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="None"/>
                                <VisualState x:Name="Closed"/>
                                <VisualState x:Name="ClosedCompactLeft" Storyboard="{StaticResource ClosedCompactLeftStoryboard}" />
                                <VisualState x:Name="ClosedCompactRight" Storyboard="{StaticResource ClosedCompactRightStoryboard}" />
                                <VisualState x:Name="OpenOverlayLeft" Storyboard="{StaticResource OpenOverlayLeftStoryboard}" />
                                <VisualState x:Name="OpenOverlayRight" Storyboard="{StaticResource OpenOverlayRightStoryboard}" />
                                <VisualState x:Name="OpenInlineLeft" Storyboard="{StaticResource OpenInlineLeftStoryboard}" />
                                <VisualState x:Name="OpenInlineRight" Storyboard="{StaticResource OpenInlineRightStoryboard}" />
                                <VisualState x:Name="OpenCompactOverlayLeft" Storyboard="{StaticResource OpenCompactOverlayLeftStoryboard}" />
                                <VisualState x:Name="OpenCompactOverlayRight" Storyboard="{StaticResource OpenCompactOverlayRightStoryboard}" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="OverlayVisibilityStates">
                                <VisualState x:Name="OverlayNotVisible"/>
                                <VisualState x:Name="OverlayVisible" Storyboard="{StaticResource OverlayVisibleStoryboard}"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="{Binding TemplateSettings.OpenPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <ColumnDefinition x:Name="ColumnDefinition2" Width="*"/>
                        </Grid.ColumnDefinitions>

                        <Grid x:Name="ContentRoot" Grid.ColumnSpan="2">
                            <Grid.RenderTransform>
                                <TranslateTransform x:Name="ContentTransform"/>
                            </Grid.RenderTransform>
                            <ContentPresenter Focusable="False" Content="{TemplateBinding Content}"/>
                            <Rectangle x:Name="LightDismissLayer" Fill="{DynamicResource ApplicationTransparentBrush}" Visibility="Collapsed"/>
                        </Grid>
                        <Grid x:Name="PaneRoot" Background="{TemplateBinding PaneBackground}" Grid.ColumnSpan="2" HorizontalAlignment="Left" Visibility="Collapsed" Width="{Binding OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <Grid.Clip>
                                <RectangleGeometry x:Name="PaneClipRectangle">
                                    <RectangleGeometry.Transform>
                                        <TranslateTransform x:Name="PaneClipRectangleTransform"/>
                                    </RectangleGeometry.Transform>
                                </RectangleGeometry>
                            </Grid.Clip>
                            <Grid.RenderTransform>
                                <TranslateTransform x:Name="PaneTransform"/>
                            </Grid.RenderTransform>
                            <ContentPresenter Focusable="False" Content="{TemplateBinding Pane}"/>
                            <Rectangle x:Name="HCPaneBorder" Fill="{DynamicResource ApplicationTransparentBrush}" HorizontalAlignment="Right" Visibility="Collapsed" Width="1"/>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    ***************************************************************
    **********     'MSB.UI.CONTROLS.NAVIGATIONVIEWITEM' STYLE
    ***************************************************************
    -->

    <Style TargetType="msuc:NavigationViewItem">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisualStyle}"/>
        <Setter Property="Background" Value="{DynamicResource NavigationViewItemBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource NavigationViewItemForeground}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="10, 9"/>
        <Setter Property="Margin" Value="4, 2"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msuc:NavigationViewItem">
                    <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource ControlCornerRadius}">
                        <Border.Resources>
                            <Storyboard x:Key="NotchVisibleStoryboard">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="NotchTransform" Storyboard.TargetProperty="ScaleY">
                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.5"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="NotchCollapsedToVisibleStoryboard">
                                <DoubleAnimation Storyboard.TargetName="NotchTransform" Storyboard.TargetProperty="ScaleY" To="0.5" Duration="0:0:0.5">
                                    <DoubleAnimation.EasingFunction>
                                        <BackEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                            <Storyboard x:Key="NotchVisibleToCollapsedStoryboard">
                                <DoubleAnimation Storyboard.TargetName="NotchTransform" Storyboard.TargetProperty="ScaleY" To="0" Duration="0:0:0.5">
                                    <DoubleAnimation.EasingFunction>
                                        <BackEase EasingMode="EaseIn"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </Border.Resources>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="NotchVisibilityStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="NotchCollapsed" To="NotchVisible"
                                                      Storyboard="{StaticResource NotchCollapsedToVisibleStoryboard}"/>
                                    <VisualTransition From="NotchVisible" To="NotchCollapsed"
                                                      Storyboard="{StaticResource NotchVisibleToCollapsedStoryboard}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="NotchCollapsed"/>
                                <VisualState x:Name="NotchVisible"
                                             Storyboard="{StaticResource NotchVisibleStoryboard}"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="5px" Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Grid Grid.Column="0" x:Name="IconContainer" Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}"/>
                            </Grid>
                            <Rectangle Grid.Column="0" RadiusX="4" RadiusY="4" Width="4" HorizontalAlignment="Left" RenderTransformOrigin="0.5, 0.5">
                                <Rectangle.Fill>
                                    <SolidColorBrush Color="{DynamicResource ApplicationAccentColor}"/>
                                </Rectangle.Fill>
                                <Rectangle.RenderTransform>
                                    <ScaleTransform x:Name="NotchTransform" ScaleY="0"/>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                            <ContentPresenter Grid.Column="1" x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="IconContainer" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationViewItemBackgroundPointerOver}"/>
                            <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundPointerOver}"/>
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundPointerOver}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationViewItemBackgroundSelected}"/>
                            <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundSelected}"/>
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundSelected}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationViewItemBackgroundSelectedPointerOver}"/>
                            <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundSelectedPointerOver}"/>
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundSelectedPointerOver}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationViewItemBackgroundDisabled}"/>
                            <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundDisabled}"/>
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationViewItemForegroundDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    ***************************************************************
    **********     'MSB.UI.CONTROLS.NAVIGATIONVIEWLIST' STYLE
    ***************************************************************
    -->

    <Style TargetType="msuc:NavigationViewList">
        <Setter Property="Background" Value="{DynamicResource ApplicationTransparentBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="Padding" Value="-1, 2"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="MinHeight" Value="96"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msuc:NavigationViewList">
                    <ScrollViewer Background="{TemplateBinding Background}" Style="{StaticResource NavigationListScrollViewerStyle}" Padding="1">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}"/>
                    </ScrollViewer>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    ***************************************************************
    **********     'MSB.UI.CONTROLS.NAVIGATIONVIEW' STYLE
    ***************************************************************
    -->

    <Style TargetType="msuc:NavigationView">
        <Setter Property="CompactPaneLength" Value="48"/>
        <Setter Property="OpenPaneLength" Value="250"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msuc:NavigationView">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Border.Resources>
                            <Storyboard x:Key="CompactStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SplitView" Storyboard.TargetProperty="DisplayMode">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static msuc:SplitViewDisplayMode.CompactOverlay}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonsPanel" Storyboard.TargetProperty="Orientation">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Orientation.Vertical}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="PaneHeaderPresenter" Storyboard.TargetProperty="(Grid.Row)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="0"/>
                                </Int32AnimationUsingKeyFrames>
                                <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="PaneHeaderPresenter" Storyboard.TargetProperty="Margin">
                                    <DiscreteThicknessKeyFrame KeyTime="0:0:0" Value="48, 0, 0, 0"/>
                                </ThicknessAnimationUsingKeyFrames>
                                <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="PaneGrid" Storyboard.TargetProperty="Margin">
                                    <DiscreteThicknessKeyFrame KeyTime="0:0:0" Value="0"/>
                                </ThicknessAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="ExpandedStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SplitView" Storyboard.TargetProperty="DisplayMode">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static msuc:SplitViewDisplayMode.CompactInline}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonsPanel" Storyboard.TargetProperty="Orientation">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Orientation.Vertical}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="PaneHeaderPresenter" Storyboard.TargetProperty="(Grid.Row)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="0"/>
                                </Int32AnimationUsingKeyFrames>
                                <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="PaneHeaderPresenter" Storyboard.TargetProperty="Margin">
                                    <DiscreteThicknessKeyFrame KeyTime="0:0:0" Value="48, 0, 0, 0"/>
                                </ThicknessAnimationUsingKeyFrames>
                                <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="PaneGrid" Storyboard.TargetProperty="Margin">
                                    <DiscreteThicknessKeyFrame KeyTime="0:0:0" Value="0"/>
                                </ThicknessAnimationUsingKeyFrames>
                            </Storyboard>
                        </Border.Resources>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="DisplayModeStates">
                                <VisualState x:Name="Minimal"/>
                                <VisualState x:Name="Compact"
                                             Storyboard="{StaticResource CompactStoryboard}"/>
                                <VisualState x:Name="Expanded"
                                             Storyboard="{StaticResource ExpandedStoryboard}"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid >
                            <Grid x:Name="NavButtonsGrid" VerticalAlignment="Top" Panel.ZIndex="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.ColumnSpan="2" x:Name="TitleBarDrawableRectangle" VerticalAlignment="Top" MinHeight="32" Fill="{DynamicResource ApplicationTransparentBrush}" Visibility="Collapsed"/>
                                <StackPanel x:Name="ButtonsPanel" Orientation="Horizontal">
                                    <Button x:Name="BackButton" Style="{StaticResource NavigationBackButtonStyle}" Visibility="{Binding TemplateSettings.BackButtonVisibility, RelativeSource={RelativeSource Mode=TemplatedParent}}" IsEnabled="{TemplateBinding IsBackButtonEnabled}"/>
                                    <Button x:Name="PaneToggleButton" Style="{StaticResource PaneToggleButtonStyle}"/>
                                </StackPanel>
                            </Grid>
                            <msuc:SplitView x:Name="SplitView" Panel.ZIndex="0" Background="{TemplateBinding Background}" CompactPaneLength="{TemplateBinding CompactPaneLength}" OpenPaneLength="{TemplateBinding OpenPaneLength}" IsPaneOpen="{Binding IsPaneOpen, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}">
                                <msuc:SplitView.Pane>
                                    <DockPanel x:Name="PaneGrid" HorizontalAlignment="Left" Margin="0, 48, 0, 0" Width="{TemplateBinding CompactPaneLength}">
                                        <Grid DockPanel.Dock="Top" Height="{Binding TemplateSettings.ButtonsPanelLength, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                            <ContentPresenter x:Name="PaneHeaderPresenter" Height="48" VerticalAlignment="Bottom" Content="{TemplateBinding PaneHeader}"/>
                                        </Grid>
                                        <ContentPresenter x:Name="PaneCustomContentPresenter" DockPanel.Dock="Top" Content="{TemplateBinding PaneCustomContent}"/>
                                        <msuc:NavigationViewList x:Name="FooterItems" ItemsSource="{TemplateBinding FooterItems}" Visibility="{Binding TemplateSettings.FooterItemsVisibility, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                                 DockPanel.Dock="Bottom" VerticalAlignment="Bottom"  Margin="0, 48, 0, 0"/>
                                        <msuc:NavigationViewList x:Name="MenuItems" ItemsSource="{TemplateBinding MenuItems}" Visibility="{Binding TemplateSettings.MenuItemsVisibility, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                                 Margin="0, 5, 0, 0"/>
                                    </DockPanel>
                                </msuc:SplitView.Pane>

                                <Grid x:Name="ContentGrid">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <ContentPresenter x:Name="HeaderPresenter" Grid.Row="0" Focusable="False" Content="{TemplateBinding Header}"/>
                                    <ContentPresenter x:Name="ContentPresenter" Grid.Row="1" Focusable="False" Content="{TemplateBinding Content}"/>
                                </Grid>
                            </msuc:SplitView>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger >
                            <MultiTrigger.Conditions>
                                <Condition Property="IsTitleBarPaddingEnabled" Value="True"/>
                                <Condition Property="IsActingAsTitleBar" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PaneGrid" Property="Margin" Value="{Binding TemplateSettings.TitleBarMargin, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Setter TargetName="ContentGrid" Property="Margin" Value="{Binding TemplateSettings.TitleBarMargin, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Setter TargetName="ButtonsPanel" Property="Margin" Value="{Binding TemplateSettings.TitleBarMargin, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                        </MultiTrigger>
                        <MultiTrigger >
                            <MultiTrigger.Conditions>
                                <Condition Property="IsTitleBarPaddingEnabled" Value="False"/>
                                <Condition Property="IsActingAsTitleBar" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="TitleBarDrawableRectangle" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="NavButtonsGrid" Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                        </MultiTrigger>
                        <MultiTrigger >
                            <MultiTrigger.Conditions>
                                <Condition Property="IsTitleBarPaddingEnabled" Value="True"/>
                                <Condition Property="IsActingAsTitleBar" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PaneGrid" Property="Margin" Value="{Binding TemplateSettings.TitleBarMargin, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Setter TargetName="ContentGrid" Property="Margin" Value="{Binding TemplateSettings.TitleBarMargin, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Setter TargetName="ButtonsPanel" Property="Margin" Value="{Binding TemplateSettings.TitleBarMargin, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Setter TargetName="TitleBarDrawableRectangle" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="NavButtonsGrid" Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                        </MultiTrigger>
                        <Trigger Property="IsPaneOpen" Value="True">
                            <Setter TargetName="PaneGrid" Property="Width" Value="{Binding OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="PaneHeader" Value="{x:Null}">
                            <Setter TargetName="PaneHeaderPresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="PaneCustomContent" Value="{x:Null}">
                            <Setter TargetName="PaneCustomContentPresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="CustomContentPlacement" Value="Bottom">
                            <Setter TargetName="PaneCustomContentPresenter" Property="DockPanel.Dock" Value="Bottom"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    ***************************************************************
    **********     'MSB.UI.CONTROLS.APPBARBUTTON' STYLE
    ***************************************************************
    -->

    <ControlTemplate x:Key="AppBarButonWidthRightLabelTemplate" TargetType="msuc:AppBarButton">
        <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Grid Grid.Column="0" x:Name="IconContainer" Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                    <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}"/>
                </Grid>
                <ContentPresenter Grid.Column="1" x:Name="ContentPresenter" Content="{TemplateBinding Label}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="IconContainer" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="Label" Value="">
                <Setter TargetName="ContentPresenter" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPointerOver}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPointerOver}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPointerOver}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPointerOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPressed}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPressed}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushDisabled}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AppBarButonWidthBottomLabelTemplate" TargetType="msuc:AppBarButton">
        <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <Grid Grid.Row="0" x:Name="IconContainer" Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                    <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}"/>
                </Grid>
                <ContentPresenter Grid.Row="1" x:Name="ContentPresenter" Content="{TemplateBinding Label}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="IconContainer" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="Label" Value="">
                <Setter TargetName="ContentPresenter" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPointerOver}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPointerOver}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPointerOver}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPointerOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundPressed}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPressed}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}"/>
                <Setter TargetName="BorderRoot" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushDisabled}"/>
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}"/>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="msuc:AppBarButton">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisualStyle}"/>
        <Setter Property="Background" Value="{DynamicResource ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10, 0"/>
        <Setter Property="MinHeight" Value="36"/>
        <Setter Property="MinWidth" Value="36"/>
        <Setter Property="Template" Value="{StaticResource AppBarButonWidthBottomLabelTemplate}"/>
        <Style.Triggers>
            <Trigger Property="LabelPosition" Value="Right">
                <Setter Property="Template" Value="{StaticResource AppBarButonWidthRightLabelTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--
    ***************************************************************
    **********     'MSB.UI.CONTROLS.TEACHINGTIP' STYLE
    ***************************************************************
    -->

    <Style TargetType="msuc:TeachingTip">
        <Setter Property="Background" Value="{DynamicResource TeachingTipBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TeachingTipBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msuc:TeachingTip">
                    <Popup x:Name="PART_Popup" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" StaysOpen="False" AllowsTransparency="True" PopupAnimation="Fade"
                           Placement="{Binding TemplateSettings.Placement, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                           PlacementTarget="{Binding TemplateSettings.PlacementTarget, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                           IsOpen="{Binding IsOpen, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}">
                        <Popup.Resources>
                            <Storyboard x:Key="OpenStoryboard">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BorderRootScaleTransform" Storyboard.TargetProperty="ScaleX">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BorderRootScaleTransform" Storyboard.TargetProperty="ScaleY">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="ClosedToOpenStoryboard">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BorderRootScaleTransform" Storyboard.TargetProperty="ScaleX">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BorderRootScaleTransform" Storyboard.TargetProperty="ScaleY">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenToClosedStoryboard">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BorderRootScaleTransform" Storyboard.TargetProperty="ScaleX">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BorderRootScaleTransform" Storyboard.TargetProperty="ScaleY">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>

                            <Style x:Key="TitleTextBlockStyle" TargetType="TextBlock">
                                <Setter Property="Foreground" Value="{DynamicResource TeachingTipTitleForeground}"/>
                                <Setter Property="FontWeight" Value="SemiBold"/>
                                <Setter Property="FontSize" Value="16"/>
                            </Style>
                            <Style x:Key="DescriptionTextBlockStyle" TargetType="TextBlock">
                                <Setter Property="Foreground" Value="{DynamicResource TeachingTipDescriptionForeground}"/>
                                <Setter Property="FontSize" Value="14"/>
                            </Style>
                        </Popup.Resources>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition Storyboard="{StaticResource ClosedToOpenStoryboard}"
                                                      From="Closed" To="Open"/>
                                    <VisualTransition Storyboard="{StaticResource OpenToClosedStoryboard}"
                                                      From="Open" To="Closed"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Closed"/>
                                <VisualState x:Name="Open" Storyboard="{StaticResource OpenStoryboard}"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Border x:Name="PART_Content" Margin="5" Background="{TemplateBinding Background}" MinHeight="60" MinWidth="250" MaxWidth="400" RenderTransformOrigin="0.5, 0.5"
                                CornerRadius="{DynamicResource OverlayCornerRadius}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Border.RenderTransform>
                                <ScaleTransform x:Name="BorderRootScaleTransform" ScaleX="0" ScaleY="0"/>
                            </Border.RenderTransform>
                            <Border.Effect>
                                <DropShadowEffect Color="{DynamicResource DropShadowColor}" ShadowDepth="3" BlurRadius="6" Direction="270" Opacity="0.15"/>
                            </Border.Effect>

                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Grid Grid.Row="0" x:Name="HeroContainer" MaxHeight="240">
                                    <Border x:Name="BorderMask" Background="{TemplateBinding Background}" BorderThickness="0"
                                            CornerRadius="{Binding TemplateSettings.HeroContentCornerRadius, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    <ContentPresenter  x:Name="HeroPresenter" Content="{TemplateBinding HeroContent}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                        <ContentPresenter.OpacityMask>
                                            <VisualBrush Visual="{Binding ElementName=BorderMask}"/>
                                        </ContentPresenter.OpacityMask>
                                    </ContentPresenter>
                                </Grid>
                                <StackPanel Grid.Row="1" x:Name="TextPanel" Orientation="Horizontal" Margin="20, 10">
                                    <ContentPresenter x:Name="IconPresenter" Margin="0, 0, 10, 0" TextElement.FontSize="20"
                                                      TextElement.Foreground="{DynamicResource TeachingTipTitleForeground}" Content="{TemplateBinding Icon}"/>
                                    <StackPanel VerticalAlignment="Top">
                                        <TextBlock Style="{StaticResource TitleTextBlockStyle}" Margin="0, 0, 0, 5" Text="{TemplateBinding Title}"/>
                                        <TextBlock Style="{StaticResource DescriptionTextBlockStyle}" Text="{TemplateBinding Description}"/>
                                    </StackPanel>
                                </StackPanel>
                                <Button Grid.Row="1" x:Name="HideButton" Margin="10" Visibility="Collapsed" Style="{StaticResource TeachingTipCloseButtonStyle}"/>
                                <Grid x:Name="ButtonsContainer" Grid.Row="2" Margin="5, 0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Button Grid.Column="0" x:Name="ActionButton" Margin="5, 10" MinWidth="100" Content="{TemplateBinding ActionButtonContent}"/>
                                    <Button Grid.Column="1" x:Name="CloseButton" Margin="5, 10" MinWidth="100" Content="{TemplateBinding CloseButtonContent}"/>
                                </Grid>
                            </Grid>
                        </Border>
                    </Popup>

                    <ControlTemplate.Triggers>
                        <Trigger Property="HeroContent" Value="{x:Null}">
                            <Setter TargetName="HeroPresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HeroContentPlacement" Value="Bottom">
                            <Setter TargetName="HeroContainer" Property="Grid.Row" Value="2"/>
                            <Setter TargetName="ButtonsContainer" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="TextPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="HideButton" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="BorderMask" Property="CornerRadius" Value="0, 0, 12, 12"/>
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="IconPresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ActionButtonContent" Value="{x:Null}">
                            <Setter TargetName="ActionButton" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="CloseButtonContent" Value="{x:Null}">
                            <Setter TargetName="CloseButton" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="msuc:ToastAlert">
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msuc:ToastAlert">
                    <Border x:Name="BorderRoot" Background="#BF0091FF" CornerRadius="8" RenderTransformOrigin="0.5, 0.5">
                        <Border.RenderTransform>
                            <ScaleTransform x:Name="BorderRootScaleTransform" ScaleX="0" ScaleY="0"/>
                        </Border.RenderTransform>
                        <Border.Resources>
                            <Storyboard x:Key="OpenStoryboard">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BorderRoot" Storyboard.TargetProperty="Opacity">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BorderRootScaleTransform" Storyboard.TargetProperty="ScaleX">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BorderRootScaleTransform" Storyboard.TargetProperty="ScaleY">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="ClosedToOpenStoryboard">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BorderRoot" Storyboard.TargetProperty="Opacity">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BorderRootScaleTransform" Storyboard.TargetProperty="ScaleX">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BorderRootScaleTransform" Storyboard.TargetProperty="ScaleY">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OpenToClosedStoryboard">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BorderRoot" Storyboard.TargetProperty="Opacity">
                                    <LinearDoubleKeyFrame KeyTime="0:0:0.09" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BorderRootScaleTransform" Storyboard.TargetProperty="ScaleX">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BorderRootScaleTransform" Storyboard.TargetProperty="ScaleY">
                                    <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </Border.Resources>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition Storyboard="{StaticResource ClosedToOpenStoryboard}"
                                                      From="Closed" To="Open"/>
                                    <VisualTransition Storyboard="{StaticResource OpenToClosedStoryboard}"
                                                      From="Open" To="Closed"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Closed"/>
                                <VisualState x:Name="Open" Storyboard="{StaticResource OpenStoryboard}"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid Margin="4" Height="24">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="24"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="24"/>
                            </Grid.ColumnDefinitions>

                            <Border x:Name="IconContainer" Grid.Column="0" Background="#FF0091FF" Padding="4" CornerRadius="6">
                                <msuc:ImageIcon x:Name="Icon" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <msuc:ImageIcon.Source>
                                        <DrawingImage>
                                            <DrawingImage.Drawing>
                                                <GeometryDrawing Geometry="{StaticResource InformationGeometry}" Brush="#FFFFFF"/>
                                            </DrawingImage.Drawing>
                                        </DrawingImage>
                                    </msuc:ImageIcon.Source>
                                </msuc:ImageIcon>
                            </Border>
                            <TextBlock Grid.Column="1" Margin="8 0" VerticalAlignment="Center"
                                       Foreground="#FFFFFF" Text="{TemplateBinding Message}"/>
                            <Button x:Name="HideButton" Grid.Column="2" Style="{StaticResource ToastAlertCloseButtonStyle}"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Severity" Value="Warning">
                            <Setter TargetName="BorderRoot" Property="Background" Value="#BFFF9F0A"/>
                            <Setter TargetName="IconContainer" Property="Background" Value="#FFFF9F0A"/>
                            <Setter TargetName="Icon" Property="Source">
                                <Setter.Value>
                                    <DrawingImage>
                                        <DrawingImage.Drawing>
                                            <GeometryDrawing Geometry="{StaticResource WarningGeometry}" Brush="#FFFFFF"/>
                                        </DrawingImage.Drawing>
                                    </DrawingImage>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="Severity" Value="Error">
                            <Setter TargetName="BorderRoot" Property="Background" Value="#BFD63232"/>
                            <Setter TargetName="IconContainer" Property="Background" Value="#FFD63232"/>
                            <Setter TargetName="Icon" Property="Source">
                                <Setter.Value>
                                    <DrawingImage>
                                        <DrawingImage.Drawing>
                                            <GeometryDrawing Geometry="{StaticResource ErrorGeometry}" Brush="#FFFFFF"/>
                                        </DrawingImage.Drawing>
                                    </DrawingImage>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="Severity" Value="Success">
                            <Setter TargetName="BorderRoot" Property="Background" Value="#BF30D158"/>
                            <Setter TargetName="IconContainer" Property="Background" Value="#30D158"/>
                            <Setter TargetName="IconContainer" Property="Padding" Value="6"/>
                            <Setter TargetName="Icon" Property="Source">
                                <Setter.Value>
                                    <DrawingImage>
                                        <DrawingImage.Drawing>
                                            <GeometryDrawing Geometry="{StaticResource SuccessGeometry}" Brush="#FFFFFF"/>
                                        </DrawingImage.Drawing>
                                    </DrawingImage>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
