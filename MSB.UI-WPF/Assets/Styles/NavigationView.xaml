<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:msuc="clr-namespace:MSB.UI.Controls">

    <Style x:Key="NavigationBackButtonStyle" TargetType="Button">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisualStyle}"/>
        <Setter Property="Background" Value="{DynamicResource NavigationButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource NavigationButtonForeground}"/>
        <Setter Property="FontFamily" Value="{DynamicResource SymbolFontFamily}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="PointerPressedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="ScaleX"
                                                 To="0.75" Duration="0:0:0.25">
                                <DoubleAnimation.EasingFunction>
                                    <BackEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="ScaleY"
                                                 To="0.75" Duration="0:0:0.25">
                                <DoubleAnimation.EasingFunction>
                                    <BackEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="PointerReleasedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="ScaleX"
                                                 To="1" Duration="0:0:0.15">
                                <DoubleAnimation.EasingFunction>
                                    <BackEase EasingMode="EaseIn"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="ScaleY"
                                                 To="1" Duration="0:0:0.15">
                                <DoubleAnimation.EasingFunction>
                                    <BackEase EasingMode="EaseIn"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="ContentPresenter" Content="&#xE72B;" Focusable="False" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5 0.5">
                            <ContentPresenter.RenderTransform>
                                <ScaleTransform ScaleX="1" ScaleY="1" x:Name="ContentTransform"/>
                            </ContentPresenter.RenderTransform>
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationButtonBackgroundPointerOver}"/>
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationButtonForegroundPointerOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationButtonBackgroundPressed}"/>
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationButtonForegroundPressed}"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PointerPressedStoryboard}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PointerReleasedStoryboard}"/>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationButtonBackgroundDisabled}"/>
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource NavigationButtonForegroundDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PaneToggleButtonStyle" TargetType="Button">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisualStyle}"/>
        <Setter Property="Background" Value="{DynamicResource NavigationButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource NavigationButtonForeground}"/>
        <Setter Property="FontFamily" Value="{DynamicResource SymbolFontFamily}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="BorderRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="Content" Content="&#xE700;" Focusable="False" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationButtonBackgroundPointerOver}"/>
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource NavigationButtonForegroundPointerOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationButtonBackgroundPressed}"/>
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource NavigationButtonForegroundPressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="BorderRoot" Property="Background" Value="{DynamicResource NavigationButtonBackgroundDisabled}"/>
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource NavigationButtonForegroundDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="msuc:NavigationView">
        <Setter Property="CompactPaneLength" Value="48"/>
        <Setter Property="OpenPaneLength" Value="250"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="msuc:NavigationView">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Border.Resources>
                            <Storyboard x:Key="CompactStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SplitView" Storyboard.TargetProperty="DisplayMode">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static msuc:SplitViewDisplayMode.CompactOverlay}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonsPanel" Storyboard.TargetProperty="Orientation">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Orientation.Vertical}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="PaneHeaderPresenter" Storyboard.TargetProperty="(Grid.Row)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="0"/>
                                </Int32AnimationUsingKeyFrames>
                                <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="PaneHeaderPresenter" Storyboard.TargetProperty="Margin">
                                    <DiscreteThicknessKeyFrame KeyTime="0:0:0" Value="48, 0, 0, 0"/>
                                </ThicknessAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="ExpandedStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SplitView" Storyboard.TargetProperty="DisplayMode">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static msuc:SplitViewDisplayMode.CompactInline}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonsPanel" Storyboard.TargetProperty="Orientation">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Orientation.Vertical}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <Int32AnimationUsingKeyFrames Storyboard.TargetName="PaneHeaderPresenter" Storyboard.TargetProperty="(Grid.Row)">
                                    <DiscreteInt32KeyFrame KeyTime="0:0:0" Value="0"/>
                                </Int32AnimationUsingKeyFrames>
                                <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="PaneHeaderPresenter" Storyboard.TargetProperty="Margin">
                                    <DiscreteThicknessKeyFrame KeyTime="0:0:0" Value="48, 0, 0, 0"/>
                                </ThicknessAnimationUsingKeyFrames>
                            </Storyboard>
                        </Border.Resources>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="DisplayModeStates">
                                <VisualState x:Name="Minimal"/>
                                <VisualState x:Name="Compact"
                                             Storyboard="{StaticResource CompactStoryboard}"/>
                                <VisualState x:Name="Expanded"
                                             Storyboard="{StaticResource ExpandedStoryboard}"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid >
                            <Grid x:Name="NavButtonsGrid" VerticalAlignment="Top" Panel.ZIndex="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.ColumnSpan="2" x:Name="TitleBarDrawableRectangle" VerticalAlignment="Top" MinHeight="32" Fill="{DynamicResource ApplicationTransparentBrush}" Visibility="Collapsed"/>
                                <StackPanel x:Name="ButtonsPanel" Orientation="Horizontal">
                                    <Button x:Name="BackButton" Style="{StaticResource NavigationBackButtonStyle}" Visibility="{Binding TemplateSettings.BackButtonVisibility, RelativeSource={RelativeSource Mode=TemplatedParent}}" IsEnabled="{TemplateBinding IsBackButtonEnabled}"/>
                                    <Button x:Name="PaneToggleButton" Style="{StaticResource PaneToggleButtonStyle}"/>
                                </StackPanel>
                            </Grid>
                            <msuc:SplitView x:Name="SplitView" Panel.ZIndex="0" Background="{TemplateBinding Background}" CompactPaneLength="{TemplateBinding CompactPaneLength}" OpenPaneLength="{TemplateBinding OpenPaneLength}" IsPaneOpen="{Binding IsPaneOpen, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}">
                                <msuc:SplitView.Pane>
                                    <Grid x:Name="PaneGrid" HorizontalAlignment="Left" Width="{TemplateBinding CompactPaneLength}">
                                        <Grid.RowDefinitions>
                                            <RowDefinition MinHeight="48" Height="{Binding TemplateSettings.ButtonsPanelGridLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <ContentPresenter x:Name="PaneHeaderPresenter" Grid.Row="1" Height="48" VerticalAlignment="Bottom" Content="{TemplateBinding PaneHeader}"/>
                                        <ContentPresenter x:Name="PaneCustomContentPresenter" Grid.Row="2" Content="{TemplateBinding PaneCustomContent}"/>
                                        <msuc:NavigationViewList x:Name="MenuItems" Grid.Row="3" ItemsSource="{TemplateBinding MenuItems}" Margin="0, 5, 0, 0"/>
                                        <msuc:NavigationViewList x:Name="FooterItems" Grid.Row="5" ItemsSource="{TemplateBinding FooterItems}"/>
                                    </Grid>
                                </msuc:SplitView.Pane>

                                <Grid x:Name="ContentGrid">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <ContentPresenter x:Name="HeaderPresenter" Grid.Row="0" Focusable="False" Content="{TemplateBinding Header}"/>
                                    <ContentPresenter x:Name="ContentPresenter" Grid.Row="1" Focusable="False" Content="{TemplateBinding Content}"/>
                                </Grid>
                            </msuc:SplitView>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger >
                            <MultiTrigger.Conditions>
                                <Condition Property="IsTitleBarPaddingEnabled" Value="True"/>
                                <Condition Property="IsActingAsTitleBar" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PaneGrid" Property="Margin" Value="{Binding TemplateSettings.TitleBarMargin, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Setter TargetName="ContentGrid" Property="Margin" Value="{Binding TemplateSettings.TitleBarMargin, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Setter TargetName="ButtonsPanel" Property="Margin" Value="{Binding TemplateSettings.TitleBarMargin, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                        </MultiTrigger>
                        <MultiTrigger >
                            <MultiTrigger.Conditions>
                                <Condition Property="IsTitleBarPaddingEnabled" Value="False"/>
                                <Condition Property="IsActingAsTitleBar" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="TitleBarDrawableRectangle" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="NavButtonsGrid" Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                        </MultiTrigger>
                        <MultiTrigger >
                            <MultiTrigger.Conditions>
                                <Condition Property="IsTitleBarPaddingEnabled" Value="True"/>
                                <Condition Property="IsActingAsTitleBar" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PaneGrid" Property="Margin" Value="{Binding TemplateSettings.TitleBarMargin, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Setter TargetName="ContentGrid" Property="Margin" Value="{Binding TemplateSettings.TitleBarMargin, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Setter TargetName="ButtonsPanel" Property="Margin" Value="{Binding TemplateSettings.TitleBarMargin, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Setter TargetName="TitleBarDrawableRectangle" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="NavButtonsGrid" Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                        </MultiTrigger>
                        <Trigger Property="IsPaneOpen" Value="True">
                            <Setter TargetName="PaneGrid" Property="Width" Value="{Binding OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="PaneHeader" Value="{x:Null}">
                            <Setter TargetName="PaneHeaderPresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="PaneCustomContent" Value="{x:Null}">
                            <Setter TargetName="PaneCustomContentPresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>